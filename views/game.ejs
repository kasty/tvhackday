<!DOCTYPE html>
<html>
<head>
	<title>Join the band !</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
    <link rel='stylesheet' href='/stylesheets/login/demo.css' />
    <link rel='stylesheet' href='/stylesheets/scores.css' />
    <script src="/javascripts/jquery-1.11.1.js"></script>
	<script src="/socket.io/socket.io.js"></script>


    <script type="text/javascript" src="/javascripts/bower_components/dancer.js/dancer.min.js"></script>
    <script src="/javascripts/bower_components/easeljs/lib/easeljs-0.7.1.combined.js"></script>
    <script src="/javascripts/bower_components/TweenJS/lib/tweenjs-0.5.1.min.js"></script>
    <script src="/javascripts/bower_components/randomColor/randomColor.js"></script>
    <script src="http://www.arte.tv/arte_vp/js/main.js"></script>
</head>
<body>
  	<header>
		<h1>Join the band</h1>
	</header>

	<ul id="players">
	</ul>

	<!--<h2>GAME WILL BE HERE</h2>-->

    <div class="video-container" arte_vp_config="arte_concert" arte_vp_lang="fr_FR" arte_vp_url="http://concert.arte.tv/fr/player/27446" arte_vp_autostart="1">
    	<h4>Click to play</h4>
    </div>

    <script>

    	// Params
        var ow = 720; // your stage width
        var oh = 405; // your stage height
        var canvas;
        var Ease = createjs.Ease;
        var Tween = createjs.Tween;
        var circleRadius = 20;
        var trackWidth = ow/3;
        var goalLimitY;

        function createUserController (_container) {
            var self = this;
            this.players = [];
            this.container = _container;


            this.reset = function() {
                if (this.container.find('#joined').length == 0) this.container.append('<div id="joined"></div>');
                if (this.container.find('#points').length == 0) this.container.append('<div id="points"></div>');
                if (this.container.find('#scoring').length == 0) this.container.append('<div id="scoring"></div>');
            }
            this.reset();

            // Add new local user
            this.createUser = function(userData) {
                if (typeof self.players[userData.name] == "undefined") {
                    userData.score = 0;
                    self.players[userData.name] = userData;
                    self.container.find('#joined').stop().show().html(userData.name+' joined !').animate({fontSize : '100px'}, 500, function() {
                        self.container.find('#joined').fadeOut('slow', function() { self.container.find('#joined').empty().removeAttr('style'); ; });
                    });

                    this.refreshScore();
                }
            }

            this.setContainer = function(_container) {
                self.container = _container;
                self.reset();
            }

            // Refresh scores content
            this.refreshScore = function() {
                self.container.find('#scoring').empty().html('<h3>SCORES</h3><ul id="classement"></ul>');
                var sortable = [];

                // Sort players
                for (var s in self.players) {
                    var user = self.players[s];
                    console.log(user);
                    sortable.push([user.name, user.score]);
                    sortable.sort(function(a, b) {return a[1] - b[1]});
                    sortable.reverse();
                }

                $.each(sortable, function(key, value) {
                    self.container.find('#classement').append('<li id="'+value[0]+'"><span class="player">'+value[0]+' :</span><span class="score">'+value[1]+'</span></li>');
                });
            }

            //display the player's points
            this.displayPoints = function(userName, points) {
                if(self.container.find('#points').find('#'+userName).length == 0)
                    self.container.find('#points').append('<div id="'+userName+'"></div>');

                self.container.find('#'+userName).html(userName+'<br />'+points).stop().animate({ opacity : 1, top : '100px'}, 200, function() {
                    setTimeout(function () {
                        self.container.find('#' + userName).animate({opacity: 0, top: '-100px'}, 600, function () {
                            self.container.find('#' + userName).removeAttr('style');
                        });
                    });
                });
            };

            this.playerScored = function(userName) {
                self.players[userName].score += 1;
                self.displayPoints(userName, "+1");
                self.refreshScore();
            };

            this.playerFailed = function(userName) {
                if (self.players[userName].score > 0) {
                    self.players[userName].score -= 1;
                    self.displayPoints(userName, "-1");
                    self.refreshScore();
                }
            };
        };

        var userController = new createUserController($(".infoOverlay"));

        function zobInit()
        {
            // Canvas & stage
            canvas.width = $(canvas).parent('div').width();
            canvas.height = $(canvas).parent('div').height();
            goalLimitY = canvas.height/5;

            stage = new createjs.Stage(canvas);

            // Lines
            createTrackLine(1);
            createTrackLine(2);
            createGoalLine();

            // Events
            window.addEventListener('resize', resize, false);

            // FPS & render loop
            createjs.Ticker.setFPS(60);
            createjs.Ticker.addEventListener('tick', function() {
                //console.log(createjs.Ticker.getMeasuredFPS());
                stage.update();
            });
        }

        // Functions
        function createCircle(trackNumber, color) {
            var circle = new createjs.Shape();
            circle.graphics.beginFill(color).drawCircle(0, 0, circleRadius);
            circle.x = trackWidth*trackNumber;
            circle.y = 0-circleRadius;
            circle.track = trackNumber;
            circle.scoredBy = {};
            Tween.get(circle).to({y: oh+circleRadius}, 1500, Ease.linear).call(function() {
                stage.removeChild(circle);
            });
            stage.addChild(circle);
        }

        function createTrackLine(trackNumber) {
            var line = new createjs.Shape();
            line.graphics.setStrokeStyle(5);
            line.graphics.beginStroke("#EEE");
            line.graphics.moveTo(trackWidth*trackNumber, 0);
            line.graphics.lineTo(trackWidth*trackNumber, oh); // What the...
            line.graphics.endStroke();
            stage.addChild(line);
        }

        function createGoalLine() {
            var line = new createjs.Shape();
            line.graphics.beginFill("#EEE").drawRect(50, oh-goalLimitY, ow-100, 5);
            stage.addChild(line);
        }

        function resize() {
            // keep aspect ratio
            var w = $(canvas).parent('div').width();
            var h = $(canvas).parent('div').height();
            var scale = Math.min(w / ow, h / oh);
            stage.scaleX = scale;
            stage.scaleY = scale;

            // adjust canvas size
            stage.canvas.width = ow * scale;
            stage.canvas.height = oh * scale;

            stage.update();
        }

        function checkCollision(type, playerName) {
            var childrenCount = stage.getNumChildren();
            var goalTopLimit = oh-goalLimitY;
            var player = userController.players[playerName];
            var childInGoal = false;

            for (var i=0; i<childrenCount; i++) {
                var child = stage.getChildAt(i);
                if (
                    child.y > goalTopLimit
                    && child.track == type
                    && !child.scoredBy.hasOwnProperty(playerName)
                ) {
                    console.log("+1 by "+playerName);
                    child.scoredBy[playerName] = true;
                    childInGoal = true;
                    userController.playerScored(playerName);
                }
            }

            if (!childInGoal && player.score > 0) {
                player.score -= 1;
                userController.playerFailed(playerName);
            }
        }

        // Sockets
        $(document).on('ready', function(event) {
            var socket = io();

            socket.on('new_challenger_event', function(data) {
                userController.createUser(data);

            	if ($(".infoOverlay").length > 0) {
            	    userController.setContainer($(".infoOverlay"));
                } else {
                    userController.setContainer($('.video-container').find('iframe')[0].contentWindow.$(".infoOverlay"));
                }
            });

            socket.on('challenger_left_event', function(data) {
            	if (userController) {
            	    userController.players.splice(data.name, 1);
                	userController.refreshScore();
            	}
            });

            socket.on('kick_event', function(data) {
                if (typeof stage == 'undefined') return;

                var type = data.type;
                var playerName = data.name;
                checkCollision(type, playerName);
            });

        });

	document.domain = "arte.tv";
	var player;
	var hasAlreadyPaused = false;
	var dancer = new Dancer();
	var previousKickTimeStamp,previousClacTimeStamp,inactivityKickTime,inactivityClacTime,inactivityTime = 0;
					
	$(window).load(function() {
		
		//readd game info div
		$('.video-container').append("<div class='infoOverlay'></div>");
					
					
		//listen to the arte_vp_player_config_ready event
		$('.video-container').on('arte_vp_player_ready',function() {
			
			//set control at right index for game
			$(this).find('iframe').contents().find('body').find('.jwcontrols').css('z-index', 2002);
			
			//retrieve player API
			arte_vp = $(this).find('iframe')[0].contentWindow.arte_vp;
			
			var self = this;
			
			//when player start to play
			$(this).find('iframe')[0].contentWindow.arte_vp.jwplayer.onPlay(function(event){
				
				//first play
				if(hasAlreadyPaused == false)
				{
					hasAlreadyPaused = true;
					
					//add game canvas
					$(self).find('iframe')[0].contentWindow.$("#player_container").append("<canvas style='width:100%;height:100%;position: relative;'></canvas>");
					canvas = $(self).find('iframe')[0].contentWindow.$("#player_container canvas")[0];
					
					//init canvas
					zobInit();
					
					//reinject game info div
					$(self).find('iframe')[0].contentWindow.$("head").append($("<link/>", 
						{ rel: "stylesheet", href: "http://test.arte.tv:3000/stylesheets/scores.css", type: "text/css" }
					));   
					$(self).find('iframe')[0].contentWindow.$(".jwmain").append($(".infoOverlay")[0]);
					$(".infoOverlay").remove();
					
					//pause jwplayer and set volume to 0
					arte_vp.jwplayer.pause();
					//arte_vp.jwplayer.setVolume(0);
					
					//load the dancer with the lowest video quality
					dancer.load({src:arte_vp.arte_vp_sources[1].file});
					dancer.play();
					dancer.audio.volume = 1;
					
					//relaunch the video
					//dancer.audioAdapter.setVolume(1);
					setTimeout(function(){arte_vp.jwplayer.play(true);arte_vp.jwplayer.setVolume(0);},600);
					
					//arte_vp.jwplayer.play(true);
					
					
				
					setInterval(function(){
					
						inactivityClacTime = Date.now()-previousClacTimeStamp;
						inactivityKickTime = Date.now()-previousKickTimeStamp;
						inactivityTime = Math.min(inactivityKickTime,inactivityClacTime);
					
						if(inactivityTime>800)
						    console.log("shake");
								
					}, 20);
		
					var kick = dancer.createKick({
						frequency:[ 0, 4 ],
						threshold:0.04,
						decay:0.005,
						onKick: function ( mag ) {
							if(inactivityKickTime>100)
							{
								var color = randomColor();
								createCircle(1, color);
							}
							previousKickTimeStamp = Date.now();
						},
						offKick: function ( mag ) {
						}
					});

					// Let's turn this kick on right away
					kick.on();
				
					var clac = dancer.createKick({
						frequency:[ 4, 10 ],
						threshold:0.04,
						decay:0.005,
						onKick: function ( mag ) {
							if(inactivityClacTime>100)
							{
								var color = randomColor();
								createCircle(2, color);
							}
							previousClacTimeStamp = Date.now();
						},
						offKick: function ( mag ) {
						}
					});

					// Let's turn this kick on right away
					clac.on();
				}
			});
	
		});
	});
    </script>

</body>
</html>
